
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace model_ppc_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 29> locations_array__ = 
{" (found before start of program)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 19, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 20, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 21, column 4 to column 44)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 23, column 4 to column 57)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 24, column 4 to column 55)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 25, column 4 to column 52)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 26, column 4 to column 52)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 31, column 4 to column 17)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 44, column 8 to column 36)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 43, column 17 to line 45, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 43, column 4 to line 45, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 59, column 4 to column 24)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 61, column 8 to column 48)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 60, column 19 to line 62, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 60, column 4 to line 62, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 2, column 4 to column 10)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 3, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 3, column 4 to column 32)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 4, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 4, column 4 to column 32)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 5, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 5, column 4 to column 30)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 6, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 6, column 4 to column 31)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 7, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 7, column 4 to column 30)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 31, column 11 to column 12)",
 " (in '/home/racehorse_bayes/models/model_ppc.stan', line 59, column 11 to column 12)"};




class model_ppc_model final : public model_base_crtp<model_ppc_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> dad_value_numeric__;
  Eigen::Matrix<double, -1, 1> dad_num_of_starts__;
  Eigen::Matrix<double, -1, 1> dad_first_place__;
  Eigen::Matrix<double, -1, 1> dad_second_place__;
  Eigen::Matrix<double, -1, 1> dad_third_place__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_value_numeric{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_num_of_starts{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_first_place{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_second_place{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_third_place{nullptr, 0};
 
 public:
  ~model_ppc_model() { }
  
  inline std::string model_name() const final { return "model_ppc_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  model_ppc_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_model_namespace::model_ppc_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      stan::math::validate_non_negative_index("dad_value_numeric", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","dad_value_numeric",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_value_numeric__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_value_numeric) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_value_numeric__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_value_numeric_flat__;
        current_statement__ = 18;
        dad_value_numeric_flat__ = context__.vals_r("dad_value_numeric");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(dad_value_numeric,
            dad_value_numeric_flat__[(pos__ - 1)],
            "assigning variable dad_value_numeric", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("dad_num_of_starts", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","dad_num_of_starts",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_num_of_starts__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_num_of_starts) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_num_of_starts__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_num_of_starts_flat__;
        current_statement__ = 20;
        dad_num_of_starts_flat__ = context__.vals_r("dad_num_of_starts");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(dad_num_of_starts,
            dad_num_of_starts_flat__[(pos__ - 1)],
            "assigning variable dad_num_of_starts", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      stan::math::validate_non_negative_index("dad_first_place", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","dad_first_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_first_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_first_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_first_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_first_place_flat__;
        current_statement__ = 22;
        dad_first_place_flat__ = context__.vals_r("dad_first_place");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          stan::model::assign(dad_first_place,
            dad_first_place_flat__[(pos__ - 1)],
            "assigning variable dad_first_place", stan::model::index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("dad_second_place", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","dad_second_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_second_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_second_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_second_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_second_place_flat__;
        current_statement__ = 24;
        dad_second_place_flat__ = context__.vals_r("dad_second_place");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          stan::model::assign(dad_second_place,
            dad_second_place_flat__[(pos__ - 1)],
            "assigning variable dad_second_place", stan::model::index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      stan::math::validate_non_negative_index("dad_third_place", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","dad_third_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_third_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_third_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_third_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_third_place_flat__;
        current_statement__ = 26;
        dad_third_place_flat__ = context__.vals_r("dad_third_place");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 26;
          stan::model::assign(dad_third_place,
            dad_third_place_flat__[(pos__ - 1)],
            "assigning variable dad_third_place", stan::model::index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("kid_value", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double a0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a0 = stan::math::lognormal_rng(-4.951, 0.83, base_rng__);
      double a1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      a1 = stan::math::lognormal_rng(-4.951, 0.83, base_rng__);
      double value_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      value_coeff = stan::math::exponential_rng(2.37, base_rng__);
      double num_of_starts_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      num_of_starts_coeff = stan::math::lognormal_rng(-1.48, 0.71,
                              base_rng__);
      double first_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      first_place_coeff = stan::math::lognormal_rng(-1.40, 0.59, base_rng__);
      double second_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      second_place_coeff = stan::math::exponential_rng(3.59, base_rng__);
      double third_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      third_place_coeff = stan::math::exponential_rng(6.10, base_rng__);
      Eigen::Matrix<double, -1, 1> mu =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 9;
        stan::model::assign(mu,
          stan::model::rvalue(dad_value_numeric, "dad_value_numeric",
            stan::model::index_uni(i)),
          "assigning variable mu", stan::model::index_uni(i));
      }
      Eigen::Matrix<double, -1, 1> kid_value =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        stan::model::assign(kid_value,
          stan::math::exponential_rng(
            (1 / stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
            base_rng__),
          "assigning variable kid_value", stan::model::index_uni(i));
      }
      out__.write(a0);
      out__.write(a1);
      out__.write(value_coeff);
      out__.write(num_of_starts_coeff);
      out__.write(first_place_coeff);
      out__.write(second_place_coeff);
      out__.write(third_place_coeff);
      out__.write(mu);
      out__.write(kid_value);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a0", "a1", "value_coeff",
      "num_of_starts_coeff", "first_place_coeff", "second_place_coeff",
      "third_place_coeff", "mu", "kid_value"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "a0");
      param_names__.emplace_back(std::string() + "a1");
      param_names__.emplace_back(std::string() + "value_coeff");
      param_names__.emplace_back(std::string() + "num_of_starts_coeff");
      param_names__.emplace_back(std::string() + "first_place_coeff");
      param_names__.emplace_back(std::string() + "second_place_coeff");
      param_names__.emplace_back(std::string() + "third_place_coeff");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kid_value" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "a0");
      param_names__.emplace_back(std::string() + "a1");
      param_names__.emplace_back(std::string() + "value_coeff");
      param_names__.emplace_back(std::string() + "num_of_starts_coeff");
      param_names__.emplace_back(std::string() + "first_place_coeff");
      param_names__.emplace_back(std::string() + "second_place_coeff");
      param_names__.emplace_back(std::string() + "third_place_coeff");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kid_value" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"value_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"num_of_starts_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"first_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"second_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"third_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"kid_value\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"value_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"num_of_starts_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"first_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"second_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"third_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"kid_value\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + N) + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  ((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + N) + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model_ppc_model_namespace::model_ppc_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_ppc_model_namespace::profiles__;
}

#endif


