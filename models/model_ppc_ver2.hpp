
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace model_ppc_ver2_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ = 
{" (found before start of program)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 14, column 4 to column 23)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 15, column 4 to column 23)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 16, column 4 to column 32)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 17, column 4 to column 40)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 18, column 4 to column 38)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 19, column 4 to column 39)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 20, column 4 to column 38)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 25, column 4 to column 24)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 27, column 8 to line 31, column 66)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 26, column 17 to line 33, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 26, column 4 to line 33, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 67, column 4 to column 24)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 68, column 4 to column 29)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 70, column 8 to column 69)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 71, column 8 to column 50)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 69, column 19 to line 72, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 69, column 4 to line 72, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 47, column 4 to column 35)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 48, column 4 to column 43)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 49, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 50, column 4 to column 42)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 51, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 52, column 4 to column 32)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 53, column 4 to column 32)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 59, column 8 to column 44)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 58, column 18 to line 61, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 58, column 4 to line 61, column 5)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 4, column 4 to column 10)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 5, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 5, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 6, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 6, column 4 to column 41)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 7, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 7, column 4 to column 39)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 8, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 8, column 4 to column 40)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 9, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 9, column 4 to column 39)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 10, column 20 to column 21)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 10, column 4 to column 33)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 25, column 21 to column 22)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 67, column 21 to column 22)",
 " (in '/home/racehorse_bayes/models/model_ppc_ver2.stan', line 68, column 11 to column 12)"};




class model_ppc_ver2_model final : public model_base_crtp<model_ppc_ver2_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> dad_value_numeric__;
  Eigen::Matrix<double, -1, 1> dad_num_of_starts__;
  Eigen::Matrix<double, -1, 1> dad_first_place__;
  Eigen::Matrix<double, -1, 1> dad_second_place__;
  Eigen::Matrix<double, -1, 1> dad_third_place__;
  Eigen::Matrix<double, -1, 1> kid_value__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_value_numeric{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_num_of_starts{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_first_place{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_second_place{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_third_place{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> kid_value{nullptr, 0};
 
 public:
  ~model_ppc_ver2_model() { }
  
  inline std::string model_name() const final { return "model_ppc_ver2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  model_ppc_ver2_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_ver2_model_namespace::model_ppc_ver2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 28;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 29;
      stan::math::validate_non_negative_index("dad_value_numeric", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization","dad_value_numeric",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_value_numeric__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_value_numeric) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_value_numeric__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_value_numeric_flat__;
        current_statement__ = 30;
        dad_value_numeric_flat__ = context__.vals_r("dad_value_numeric");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 30;
          stan::model::assign(dad_value_numeric,
            dad_value_numeric_flat__[(pos__ - 1)],
            "assigning variable dad_value_numeric", stan::model::index_uni(sym1__));
          current_statement__ = 30;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "dad_value_numeric",
                                            dad_value_numeric, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("dad_num_of_starts", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","dad_num_of_starts",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_num_of_starts__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_num_of_starts) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_num_of_starts__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_num_of_starts_flat__;
        current_statement__ = 32;
        dad_num_of_starts_flat__ = context__.vals_r("dad_num_of_starts");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 32;
          stan::model::assign(dad_num_of_starts,
            dad_num_of_starts_flat__[(pos__ - 1)],
            "assigning variable dad_num_of_starts", stan::model::index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "dad_num_of_starts",
                                            dad_num_of_starts, 0);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("dad_first_place", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","dad_first_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_first_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_first_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_first_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_first_place_flat__;
        current_statement__ = 34;
        dad_first_place_flat__ = context__.vals_r("dad_first_place");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(dad_first_place,
            dad_first_place_flat__[(pos__ - 1)],
            "assigning variable dad_first_place", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "dad_first_place",
                                            dad_first_place, 0);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("dad_second_place", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","dad_second_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_second_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_second_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_second_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_second_place_flat__;
        current_statement__ = 36;
        dad_second_place_flat__ = context__.vals_r("dad_second_place");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(dad_second_place,
            dad_second_place_flat__[(pos__ - 1)],
            "assigning variable dad_second_place", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "dad_second_place",
                                            dad_second_place, 0);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("dad_third_place", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","dad_third_place",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      dad_third_place__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_third_place) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_third_place__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_third_place_flat__;
        current_statement__ = 38;
        dad_third_place_flat__ = context__.vals_r("dad_third_place");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(dad_third_place,
            dad_third_place_flat__[(pos__ - 1)],
            "assigning variable dad_third_place", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "dad_third_place",
                                            dad_third_place, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("kid_value", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","kid_value","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      kid_value__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&kid_value) Eigen::Map<Eigen::Matrix<double, -1, 1>>(kid_value__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> kid_value_flat__;
        current_statement__ = 40;
        kid_value_flat__ = context__.vals_r("kid_value");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(kid_value, kid_value_flat__[(pos__ - 1)],
            "assigning variable kid_value", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "kid_value", kid_value,
                                            0);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("kid_value_p", "N", N);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("log_likelihood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_ver2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a0 = DUMMY_VAR__;
      current_statement__ = 1;
      a0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0.0,
             lp__);
      local_scalar_t__ a1 = DUMMY_VAR__;
      current_statement__ = 2;
      a1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0.0,
             lp__);
      local_scalar_t__ value_coeff = DUMMY_VAR__;
      current_statement__ = 3;
      value_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0.0, lp__);
      local_scalar_t__ num_of_starts_coeff = DUMMY_VAR__;
      current_statement__ = 4;
      num_of_starts_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                              jacobian__>(0.0, lp__);
      local_scalar_t__ first_place_coeff = DUMMY_VAR__;
      current_statement__ = 5;
      first_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0.0, lp__);
      local_scalar_t__ second_place_coeff = DUMMY_VAR__;
      current_statement__ = 6;
      second_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                             jacobian__>(0.0, lp__);
      local_scalar_t__ third_place_coeff = DUMMY_VAR__;
      current_statement__ = 7;
      third_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0.0, lp__);
      std::vector<local_scalar_t__> mu =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 11;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 9;
        stan::model::assign(mu,
          (((((((((value_coeff *
                    stan::model::rvalue(dad_value_numeric,
                      "dad_value_numeric", stan::model::index_uni(i))) +
                   0.00001) + a0) - a1) +
                (num_of_starts_coeff *
                  stan::model::rvalue(dad_num_of_starts, "dad_num_of_starts",
                    stan::model::index_uni(i)))) +
               (first_place_coeff *
                 stan::model::rvalue(dad_first_place, "dad_first_place",
                   stan::model::index_uni(i)))) +
              (second_place_coeff *
                stan::model::rvalue(dad_second_place, "dad_second_place",
                  stan::model::index_uni(i)))) +
             (third_place_coeff *
               stan::model::rvalue(dad_third_place, "dad_third_place",
                 stan::model::index_uni(i)))) / 4),
          "assigning variable mu", stan::model::index_uni(i));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      {
        current_statement__ = 18;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(value_coeff, 0.2, 0.01));
        current_statement__ = 19;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(num_of_starts_coeff, 0.4, 0.01));
        current_statement__ = 20;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(first_place_coeff, 0.3, 0.01));
        current_statement__ = 21;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(second_place_coeff, 0.3, 0.01));
        current_statement__ = 22;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(third_place_coeff, 0.3, 0.01));
        current_statement__ = 23;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(a0, -1.95, 0.83));
        current_statement__ = 24;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(a1, -1.95, 0.83));
        current_statement__ = 27;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 25;
          lp_accum__.add(
            stan::math::exponential_lpdf<propto__>(
              stan::model::rvalue(kid_value, "kid_value",
                stan::model::index_uni(j)),
              (1 / stan::model::rvalue(mu, "mu", stan::model::index_uni(j)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_ppc_ver2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double a0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a0 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0.0,
             lp__);
      double a1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      a1 = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0.0,
             lp__);
      double value_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      value_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0.0, lp__);
      double num_of_starts_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      num_of_starts_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                              jacobian__>(0.0, lp__);
      double first_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      first_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0.0, lp__);
      double second_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      second_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                             jacobian__>(0.0, lp__);
      double third_place_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      third_place_coeff = in__.template read_constrain_lb<local_scalar_t__, 
                            jacobian__>(0.0, lp__);
      std::vector<double> mu =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(a0);
      out__.write(a1);
      out__.write(value_coeff);
      out__.write(num_of_starts_coeff);
      out__.write(first_place_coeff);
      out__.write(second_place_coeff);
      out__.write(third_place_coeff);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 9;
        stan::model::assign(mu,
          (((((((((value_coeff *
                    stan::model::rvalue(dad_value_numeric,
                      "dad_value_numeric", stan::model::index_uni(i))) +
                   0.00001) + a0) - a1) +
                (num_of_starts_coeff *
                  stan::model::rvalue(dad_num_of_starts, "dad_num_of_starts",
                    stan::model::index_uni(i)))) +
               (first_place_coeff *
                 stan::model::rvalue(dad_first_place, "dad_first_place",
                   stan::model::index_uni(i)))) +
              (second_place_coeff *
                stan::model::rvalue(dad_second_place, "dad_second_place",
                  stan::model::index_uni(i)))) +
             (third_place_coeff *
               stan::model::rvalue(dad_third_place, "dad_third_place",
                 stan::model::index_uni(i)))) / 4),
          "assigning variable mu", stan::model::index_uni(i));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      if (emit_transformed_parameters__) {
        out__.write(mu);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> kid_value_p =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> log_likelihood =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 14;
        stan::model::assign(log_likelihood,
          stan::math::exponential_lpdf<false>(
            stan::model::rvalue(kid_value, "kid_value",
              stan::model::index_uni(j)),
            (1 / stan::model::rvalue(mu, "mu", stan::model::index_uni(j)))),
          "assigning variable log_likelihood", stan::model::index_uni(j));
        current_statement__ = 15;
        stan::model::assign(kid_value_p,
          stan::math::exponential_rng(
            (1 / stan::model::rvalue(mu, "mu", stan::model::index_uni(j))),
            base_rng__),
          "assigning variable kid_value_p", stan::model::index_uni(j));
      }
      out__.write(kid_value_p);
      out__.write(log_likelihood);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a0 = DUMMY_VAR__;
      a0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, a0);
      local_scalar_t__ a1 = DUMMY_VAR__;
      a1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, a1);
      local_scalar_t__ value_coeff = DUMMY_VAR__;
      value_coeff = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, value_coeff);
      local_scalar_t__ num_of_starts_coeff = DUMMY_VAR__;
      num_of_starts_coeff = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, num_of_starts_coeff);
      local_scalar_t__ first_place_coeff = DUMMY_VAR__;
      first_place_coeff = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, first_place_coeff);
      local_scalar_t__ second_place_coeff = DUMMY_VAR__;
      second_place_coeff = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, second_place_coeff);
      local_scalar_t__ third_place_coeff = DUMMY_VAR__;
      third_place_coeff = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, third_place_coeff);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a0", "a1", "value_coeff",
      "num_of_starts_coeff", "first_place_coeff", "second_place_coeff",
      "third_place_coeff", "mu", "kid_value_p", "log_likelihood"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a0");
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "value_coeff");
    param_names__.emplace_back(std::string() + "num_of_starts_coeff");
    param_names__.emplace_back(std::string() + "first_place_coeff");
    param_names__.emplace_back(std::string() + "second_place_coeff");
    param_names__.emplace_back(std::string() + "third_place_coeff");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kid_value_p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_likelihood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a0");
    param_names__.emplace_back(std::string() + "a1");
    param_names__.emplace_back(std::string() + "value_coeff");
    param_names__.emplace_back(std::string() + "num_of_starts_coeff");
    param_names__.emplace_back(std::string() + "first_place_coeff");
    param_names__.emplace_back(std::string() + "second_place_coeff");
    param_names__.emplace_back(std::string() + "third_place_coeff");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kid_value_p" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_likelihood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"value_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"num_of_starts_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"first_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"second_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"third_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"kid_value_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_likelihood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"value_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"num_of_starts_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"first_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"second_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"third_place_coeff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"kid_value_p\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_likelihood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"a0", "a1", "value_coeff",
      "num_of_starts_coeff", "first_place_coeff", "second_place_coeff",
      "third_place_coeff"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model_ppc_ver2_model_namespace::model_ppc_ver2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_ppc_ver2_model_namespace::profiles__;
}

#endif


