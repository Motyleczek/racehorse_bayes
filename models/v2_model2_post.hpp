
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace v2_model2_post_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 64> locations_array__ = 
{" (found before start of program)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 20, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 21, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 22, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 23, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 24, column 4 to column 22)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 27, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 28, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 29, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 30, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 31, column 4 to column 22)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 32, column 4 to column 15)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 33, column 4 to column 15)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 39, column 0 to column 13)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 42, column 8 to line 51, column 47)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 41, column 13 to line 52, column 9)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 41, column 0 to line 52, column 9)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 77, column 4 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 78, column 4 to column 33)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 81, column 8 to column 65)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 82, column 8 to column 54)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 80, column 4 to line 83, column 5)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 79, column 4 to line 83, column 5)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 57, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 58, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 59, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 60, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 61, column 3 to column 31)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 63, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 64, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 65, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 66, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 67, column 3 to column 31)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 69, column 3 to column 32)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 70, column 3 to column 30)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 72, column 8 to column 36)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 71, column 18 to line 73, column 5)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 71, column 4 to line 73, column 5)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 4, column 4 to column 10)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 6, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 6, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 7, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 7, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 8, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 8, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 9, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 9, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 10, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 10, column 4 to column 22)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 12, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 12, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 13, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 13, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 14, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 14, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 15, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 15, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 16, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 16, column 4 to column 22)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 17, column 11 to column 12)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 17, column 4 to column 21)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 39, column 7 to column 8)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 77, column 10 to column 11)",
 " (in '/home/final_project/racehorse_bayes/models/v2_model2_post.stan', line 78, column 10 to column 11)"};




class v2_model2_post_model final : public model_base_crtp<v2_model2_post_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> dad_ns__;
  Eigen::Matrix<double, -1, 1> dad_fp__;
  Eigen::Matrix<double, -1, 1> dad_sp__;
  Eigen::Matrix<double, -1, 1> dad_tp__;
  Eigen::Matrix<double, -1, 1> dad_val__;
  Eigen::Matrix<double, -1, 1> mum_ns__;
  Eigen::Matrix<double, -1, 1> mum_fp__;
  Eigen::Matrix<double, -1, 1> mum_sp__;
  Eigen::Matrix<double, -1, 1> mum_tp__;
  Eigen::Matrix<double, -1, 1> mum_val__;
  Eigen::Matrix<double, -1, 1> output__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_ns{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_fp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_sp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_tp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dad_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mum_ns{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mum_fp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mum_sp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mum_tp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mum_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> output{nullptr, 0};
 
 public:
  ~v2_model2_post_model() { }
  
  inline std::string model_name() const final { return "v2_model2_post_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  v2_model2_post_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "v2_model2_post_model_namespace::v2_model2_post_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 38;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 38;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 39;
      stan::math::validate_non_negative_index("dad_ns", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","dad_ns","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dad_ns__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_ns) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_ns__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_ns_flat__;
        current_statement__ = 40;
        dad_ns_flat__ = context__.vals_r("dad_ns");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(dad_ns, dad_ns_flat__[(pos__ - 1)],
            "assigning variable dad_ns", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("dad_fp", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","dad_fp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dad_fp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_fp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_fp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_fp_flat__;
        current_statement__ = 42;
        dad_fp_flat__ = context__.vals_r("dad_fp");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(dad_fp, dad_fp_flat__[(pos__ - 1)],
            "assigning variable dad_fp", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("dad_sp", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","dad_sp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dad_sp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_sp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_sp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_sp_flat__;
        current_statement__ = 44;
        dad_sp_flat__ = context__.vals_r("dad_sp");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 44;
          stan::model::assign(dad_sp, dad_sp_flat__[(pos__ - 1)],
            "assigning variable dad_sp", stan::model::index_uni(sym1__));
          current_statement__ = 44;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("dad_tp", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","dad_tp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dad_tp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_tp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_tp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_tp_flat__;
        current_statement__ = 46;
        dad_tp_flat__ = context__.vals_r("dad_tp");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 46;
          stan::model::assign(dad_tp, dad_tp_flat__[(pos__ - 1)],
            "assigning variable dad_tp", stan::model::index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("dad_val", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","dad_val","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dad_val__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dad_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dad_val__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> dad_val_flat__;
        current_statement__ = 48;
        dad_val_flat__ = context__.vals_r("dad_val");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(dad_val, dad_val_flat__[(pos__ - 1)],
            "assigning variable dad_val", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("mum_ns", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","mum_ns","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mum_ns__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&mum_ns) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mum_ns__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> mum_ns_flat__;
        current_statement__ = 50;
        mum_ns_flat__ = context__.vals_r("mum_ns");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(mum_ns, mum_ns_flat__[(pos__ - 1)],
            "assigning variable mum_ns", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("mum_fp", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization","mum_fp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mum_fp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&mum_fp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mum_fp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> mum_fp_flat__;
        current_statement__ = 52;
        mum_fp_flat__ = context__.vals_r("mum_fp");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(mum_fp, mum_fp_flat__[(pos__ - 1)],
            "assigning variable mum_fp", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("mum_sp", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization","mum_sp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mum_sp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&mum_sp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mum_sp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> mum_sp_flat__;
        current_statement__ = 54;
        mum_sp_flat__ = context__.vals_r("mum_sp");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(mum_sp, mum_sp_flat__[(pos__ - 1)],
            "assigning variable mum_sp", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("mum_tp", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","mum_tp","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mum_tp__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&mum_tp) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mum_tp__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> mum_tp_flat__;
        current_statement__ = 56;
        mum_tp_flat__ = context__.vals_r("mum_tp");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(mum_tp, mum_tp_flat__[(pos__ - 1)],
            "assigning variable mum_tp", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("mum_val", "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization","mum_val","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mum_val__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&mum_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mum_val__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> mum_val_flat__;
        current_statement__ = 58;
        mum_val_flat__ = context__.vals_r("mum_val");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 58;
          stan::model::assign(mum_val, mum_val_flat__[(pos__ - 1)],
            "assigning variable mum_val", stan::model::index_uni(sym1__));
          current_statement__ = 58;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("output", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","output","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      output__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&output) Eigen::Map<Eigen::Matrix<double, -1, 1>>(output__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> output_flat__;
        current_statement__ = 60;
        output_flat__ = context__.vals_r("output");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 60;
          stan::model::assign(output, output_flat__[(pos__ - 1)],
            "assigning variable output", stan::model::index_uni(sym1__));
          current_statement__ = 60;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("output_pred", "N", N);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("log_likelyhood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "v2_model2_post_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ dad_ns_coef = DUMMY_VAR__;
      current_statement__ = 1;
      dad_ns_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ dad_fp_coef = DUMMY_VAR__;
      current_statement__ = 2;
      dad_fp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ dad_sp_coef = DUMMY_VAR__;
      current_statement__ = 3;
      dad_sp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ dad_tp_coef = DUMMY_VAR__;
      current_statement__ = 4;
      dad_tp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ dad_val_coef = DUMMY_VAR__;
      current_statement__ = 5;
      dad_val_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ mum_ns_coef = DUMMY_VAR__;
      current_statement__ = 6;
      mum_ns_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ mum_fp_coef = DUMMY_VAR__;
      current_statement__ = 7;
      mum_fp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ mum_sp_coef = DUMMY_VAR__;
      current_statement__ = 8;
      mum_sp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ mum_tp_coef = DUMMY_VAR__;
      current_statement__ = 9;
      mum_tp_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ mum_val_coef = DUMMY_VAR__;
      current_statement__ = 10;
      mum_val_coef = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 11;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 12;
      sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 16;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        stan::model::assign(mu,
          (0.1 *
            (((((((((((dad_ns_coef *
                        stan::model::rvalue(dad_ns, "dad_ns",
                          stan::model::index_uni(i))) +
                       (dad_fp_coef *
                         stan::model::rvalue(dad_fp, "dad_fp",
                           stan::model::index_uni(i)))) +
                      (dad_sp_coef *
                        stan::model::rvalue(dad_sp, "dad_sp",
                          stan::model::index_uni(i)))) +
                     (dad_tp_coef *
                       stan::model::rvalue(dad_tp, "dad_tp",
                         stan::model::index_uni(i)))) +
                    (dad_val_coef *
                      stan::model::rvalue(dad_val, "dad_val",
                        stan::model::index_uni(i)))) +
                   (mum_ns_coef *
                     stan::model::rvalue(mum_ns, "mum_ns",
                       stan::model::index_uni(i)))) +
                  (mum_fp_coef *
                    stan::model::rvalue(mum_fp, "mum_fp",
                      stan::model::index_uni(i)))) +
                 (mum_sp_coef *
                   stan::model::rvalue(mum_sp, "mum_sp",
                     stan::model::index_uni(i)))) +
                (mum_tp_coef *
                  stan::model::rvalue(mum_tp, "mum_tp",
                    stan::model::index_uni(i)))) +
               (mum_val_coef *
                 stan::model::rvalue(mum_val, "mum_val",
                   stan::model::index_uni(i)))) + alpha)),
          "assigning variable mu", stan::model::index_uni(i));
      }
      {
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dad_ns_coef, 0, 0.3));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dad_fp_coef, 0, 0.3));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dad_sp_coef, 0, 0.3));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dad_tp_coef, 0, 0.3));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(dad_val_coef, 0, 0.3));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mum_ns_coef, 0, 0.3));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mum_fp_coef, 0, 0.3));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mum_sp_coef, 0, 0.3));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mum_tp_coef, 0, 0.3));
        current_statement__ = 32;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mum_val_coef, 0, 0.3));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0.0005, 0.02));
        current_statement__ = 34;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigma, 1000));
        current_statement__ = 37;
        for (int k = 1; k <= N; ++k) {
          current_statement__ = 35;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(output,
              stan::model::rvalue(mu, "mu", stan::model::index_uni(k)), 0.01));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "v2_model2_post_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double dad_ns_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      dad_ns_coef = in__.template read<local_scalar_t__>();
      double dad_fp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      dad_fp_coef = in__.template read<local_scalar_t__>();
      double dad_sp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      dad_sp_coef = in__.template read<local_scalar_t__>();
      double dad_tp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      dad_tp_coef = in__.template read<local_scalar_t__>();
      double dad_val_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      dad_val_coef = in__.template read<local_scalar_t__>();
      double mum_ns_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      mum_ns_coef = in__.template read<local_scalar_t__>();
      double mum_fp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mum_fp_coef = in__.template read<local_scalar_t__>();
      double mum_sp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      mum_sp_coef = in__.template read<local_scalar_t__>();
      double mum_tp_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      mum_tp_coef = in__.template read<local_scalar_t__>();
      double mum_val_coef = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      mum_val_coef = in__.template read<local_scalar_t__>();
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      alpha = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> mu =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(dad_ns_coef);
      out__.write(dad_fp_coef);
      out__.write(dad_sp_coef);
      out__.write(dad_tp_coef);
      out__.write(dad_val_coef);
      out__.write(mum_ns_coef);
      out__.write(mum_fp_coef);
      out__.write(mum_sp_coef);
      out__.write(mum_tp_coef);
      out__.write(mum_val_coef);
      out__.write(alpha);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 16;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        stan::model::assign(mu,
          (0.1 *
            (((((((((((dad_ns_coef *
                        stan::model::rvalue(dad_ns, "dad_ns",
                          stan::model::index_uni(i))) +
                       (dad_fp_coef *
                         stan::model::rvalue(dad_fp, "dad_fp",
                           stan::model::index_uni(i)))) +
                      (dad_sp_coef *
                        stan::model::rvalue(dad_sp, "dad_sp",
                          stan::model::index_uni(i)))) +
                     (dad_tp_coef *
                       stan::model::rvalue(dad_tp, "dad_tp",
                         stan::model::index_uni(i)))) +
                    (dad_val_coef *
                      stan::model::rvalue(dad_val, "dad_val",
                        stan::model::index_uni(i)))) +
                   (mum_ns_coef *
                     stan::model::rvalue(mum_ns, "mum_ns",
                       stan::model::index_uni(i)))) +
                  (mum_fp_coef *
                    stan::model::rvalue(mum_fp, "mum_fp",
                      stan::model::index_uni(i)))) +
                 (mum_sp_coef *
                   stan::model::rvalue(mum_sp, "mum_sp",
                     stan::model::index_uni(i)))) +
                (mum_tp_coef *
                  stan::model::rvalue(mum_tp, "mum_tp",
                    stan::model::index_uni(i)))) +
               (mum_val_coef *
                 stan::model::rvalue(mum_val, "mum_val",
                   stan::model::index_uni(i)))) + alpha)),
          "assigning variable mu", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(mu);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> output_pred =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> log_likelyhood =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 22;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 19;
        stan::model::assign(log_likelyhood,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(output, "output", stan::model::index_uni(n)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(n)), 0.01),
          "assigning variable log_likelyhood", stan::model::index_uni(n));
        current_statement__ = 20;
        stan::model::assign(output_pred,
          stan::math::fabs(
            stan::math::normal_rng(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(n)), 0.01,
              base_rng__)),
          "assigning variable output_pred", stan::model::index_uni(n));
      }
      out__.write(output_pred);
      out__.write(log_likelyhood);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ dad_ns_coef = DUMMY_VAR__;
      dad_ns_coef = in__.read<local_scalar_t__>();
      out__.write(dad_ns_coef);
      local_scalar_t__ dad_fp_coef = DUMMY_VAR__;
      dad_fp_coef = in__.read<local_scalar_t__>();
      out__.write(dad_fp_coef);
      local_scalar_t__ dad_sp_coef = DUMMY_VAR__;
      dad_sp_coef = in__.read<local_scalar_t__>();
      out__.write(dad_sp_coef);
      local_scalar_t__ dad_tp_coef = DUMMY_VAR__;
      dad_tp_coef = in__.read<local_scalar_t__>();
      out__.write(dad_tp_coef);
      local_scalar_t__ dad_val_coef = DUMMY_VAR__;
      dad_val_coef = in__.read<local_scalar_t__>();
      out__.write(dad_val_coef);
      local_scalar_t__ mum_ns_coef = DUMMY_VAR__;
      mum_ns_coef = in__.read<local_scalar_t__>();
      out__.write(mum_ns_coef);
      local_scalar_t__ mum_fp_coef = DUMMY_VAR__;
      mum_fp_coef = in__.read<local_scalar_t__>();
      out__.write(mum_fp_coef);
      local_scalar_t__ mum_sp_coef = DUMMY_VAR__;
      mum_sp_coef = in__.read<local_scalar_t__>();
      out__.write(mum_sp_coef);
      local_scalar_t__ mum_tp_coef = DUMMY_VAR__;
      mum_tp_coef = in__.read<local_scalar_t__>();
      out__.write(mum_tp_coef);
      local_scalar_t__ mum_val_coef = DUMMY_VAR__;
      mum_val_coef = in__.read<local_scalar_t__>();
      out__.write(mum_val_coef);
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"dad_ns_coef", "dad_fp_coef",
      "dad_sp_coef", "dad_tp_coef", "dad_val_coef", "mum_ns_coef",
      "mum_fp_coef", "mum_sp_coef", "mum_tp_coef", "mum_val_coef", "alpha",
      "sigma", "mu", "output_pred", "log_likelyhood"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "dad_ns_coef");
    param_names__.emplace_back(std::string() + "dad_fp_coef");
    param_names__.emplace_back(std::string() + "dad_sp_coef");
    param_names__.emplace_back(std::string() + "dad_tp_coef");
    param_names__.emplace_back(std::string() + "dad_val_coef");
    param_names__.emplace_back(std::string() + "mum_ns_coef");
    param_names__.emplace_back(std::string() + "mum_fp_coef");
    param_names__.emplace_back(std::string() + "mum_sp_coef");
    param_names__.emplace_back(std::string() + "mum_tp_coef");
    param_names__.emplace_back(std::string() + "mum_val_coef");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "output_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_likelyhood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "dad_ns_coef");
    param_names__.emplace_back(std::string() + "dad_fp_coef");
    param_names__.emplace_back(std::string() + "dad_sp_coef");
    param_names__.emplace_back(std::string() + "dad_tp_coef");
    param_names__.emplace_back(std::string() + "dad_val_coef");
    param_names__.emplace_back(std::string() + "mum_ns_coef");
    param_names__.emplace_back(std::string() + "mum_fp_coef");
    param_names__.emplace_back(std::string() + "mum_sp_coef");
    param_names__.emplace_back(std::string() + "mum_tp_coef");
    param_names__.emplace_back(std::string() + "mum_val_coef");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "output_pred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_likelyhood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"dad_ns_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_fp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_sp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_tp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_val_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_ns_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_fp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_sp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_tp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_val_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"output_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_likelyhood\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"dad_ns_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_fp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_sp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_tp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"dad_val_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_ns_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_fp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_sp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_tp_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mum_val_coef\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"output_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_likelyhood\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  (N + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 12> names__{"dad_ns_coef",
      "dad_fp_coef", "dad_sp_coef", "dad_tp_coef", "dad_val_coef",
      "mum_ns_coef", "mum_fp_coef", "mum_sp_coef", "mum_tp_coef",
      "mum_val_coef", "alpha", "sigma"};
      const std::array<Eigen::Index, 12> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = v2_model2_post_model_namespace::v2_model2_post_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return v2_model2_post_model_namespace::profiles__;
}

#endif


